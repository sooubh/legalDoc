import jsPDF from "jspdf";
import html2canvas from "html2canvas";

const addWatermark = (pdf: jsPDF) => {
  const pageCount = pdf.internal.getNumberOfPages();
  pdf.setFont("helvetica", "italic");
  pdf.setFontSize(8);
  pdf.setTextColor(150);

  for (let i = 1; i <= pageCount; i++) {
    pdf.setPage(i);
    pdf.text(
      "Generated by AI Legal Document Analyzer",
      pdf.internal.pageSize.getWidth() / 2,
      pdf.internal.pageSize.getHeight() - 10,
      { align: "center" }
    );
  }
};

export const downloadPdf = async (element: HTMLElement) => {
  try {
    // Capture the element as a canvas
    const canvas = await html2canvas(element, {
      scale: 2,
      useCORS: true,
      backgroundColor: "#ffffff",
    });

    const imgData = canvas.toDataURL("image/png");

    // PDF setup
    const pdf = new jsPDF("p", "mm", "a4");
    const pdfWidth = pdf.internal.pageSize.getWidth();
    const pdfHeight = pdf.internal.pageSize.getHeight();

    // Canvas size in pixels
    const canvasWidth = canvas.width;
    const canvasHeight = canvas.height;

    // Convert canvas pixels to PDF units
    const ratio = canvasWidth / pdfWidth;
    const totalPdfHeight = canvasHeight / ratio;

    let position = 0;

    // Add first page
    pdf.addImage(imgData, "PNG", 0, position, pdfWidth, totalPdfHeight);

    // Add remaining pages if necessary
    let heightLeft = totalPdfHeight - pdfHeight;

    while (heightLeft > 0) {
      position -= pdfHeight; // Shift image up
      pdf.addPage();
      pdf.addImage(imgData, "PNG", 0, position, pdfWidth, totalPdfHeight);
      heightLeft -= pdfHeight;
    }

    // Add watermark
    addWatermark(pdf);

    // Save PDF
    pdf.save("legal-analysis-summary.pdf");
  } catch (err) {
    console.error("Failed to generate PDF:", err);
    throw new Error("Failed to generate PDF. Please try again.");
  }
};
